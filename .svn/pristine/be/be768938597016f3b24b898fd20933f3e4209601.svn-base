<script setup lang="tsx">
import { PerfectScrollbar } from 'vue3-perfect-scrollbar'
import { useTheme } from 'vuetify'
import { staticPrimaryColor, staticPrimaryDarkenColor } from '@/plugins/vuetify/theme'
import { useConfigStore } from '@core/stores/config'
import { AppContentLayoutNav } from '@layouts/enums'
import { cookieRef } from '@layouts/stores/config'
import { themeConfig } from '@themeConfig'
import { NuxtLink } from '#components'

const isNavDrawerOpen = ref(false)
const { public: { ppManager, psaSync, vircomPortal } } = useRuntimeConfig()

const configStore = useConfigStore()

// ðŸ‘‰ Primary Color
const vuetifyTheme = useTheme()

const colors: { main: string; darken: string }[] = [
  { main: staticPrimaryColor, darken: staticPrimaryDarkenColor },
  { main: '#0D9394', darken: '#0C8485' },
  { main: '#FFB400', darken: '#E6A200' },
  { main: '#FF4C51', darken: '#E64449' },
  { main: '#16B1FF', darken: '#149FE6' },
]

const customPrimaryColor = ref('#ffffff')

watch(
  () => configStore.theme,
  () => {
    const cookiePrimaryColor = cookieRef(`${vuetifyTheme.name.value}ThemePrimaryColor`, null).value

    if (cookiePrimaryColor && !colors.some(color => color.main === cookiePrimaryColor))
      customPrimaryColor.value = cookiePrimaryColor
  },
  { immediate: true },
)

// ðŸ‘‰ Layout
const currentLayout = ref<'vertical' | 'collapsed' | 'horizontal'>(configStore.isVerticalNavCollapsed ? 'collapsed' : configStore.appContentLayoutNav)


watch(currentLayout, () => {
  if (currentLayout.value === 'collapsed') {
    configStore.isVerticalNavCollapsed = true
    configStore.appContentLayoutNav = AppContentLayoutNav.Vertical
  }
  else {
    configStore.isVerticalNavCollapsed = false
    configStore.appContentLayoutNav = currentLayout.value
  }
})

// watch vertical sidebar collapse state
watch(
  () => configStore.isVerticalNavCollapsed,
  () => {
    currentLayout.value = configStore.isVerticalNavCollapsed
      ? 'collapsed'
      : configStore.appContentLayoutNav
  },
)


// ðŸ‘‰ Direction
const currentDir = ref(configStore.isAppRTL ? 'rtl' : 'ltr')

watch(currentDir, () => {
  if (currentDir.value === 'rtl')
    configStore.isAppRTL = true

  else
    configStore.isAppRTL = false
})

// check if any value set in cookie
const isCookieHasAnyValue = ref(false)

const { locale } = useI18n({ useScope: 'global' })

const isActiveLangRTL = computed(() => {
  const lang = themeConfig.app.i18n.langConfig.find(l => l.i18nLang === locale.value)

  return lang?.isRTL ?? false
})

const onClickOutside = () => {
  console.log("outsite")
}

watch([
  () => vuetifyTheme.current.value.colors.primary,
  configStore.$state,
  locale,
], () => {
  const initialConfigValue = [
    staticPrimaryColor,
    staticPrimaryColor,
    themeConfig.app.theme,
    themeConfig.app.skin,
    themeConfig.verticalNav.isVerticalNavSemiDark,
    themeConfig.verticalNav.isVerticalNavCollapsed,
    themeConfig.app.contentWidth,
    isActiveLangRTL.value,
    themeConfig.app.contentLayoutNav,
  ]

  const themeConfigValue = [
    vuetifyTheme.themes.value.light.colors.primary,
    vuetifyTheme.themes.value.dark.colors.primary,
    configStore.theme,
    configStore.skin,
    configStore.isVerticalNavSemiDark,
    configStore.isVerticalNavCollapsed,
    configStore.appContentWidth,
    configStore.isAppRTL,
    configStore.appContentLayoutNav,
  ]

  currentDir.value = configStore.isAppRTL ? 'rtl' : 'ltr'

  isCookieHasAnyValue.value = JSON.stringify(themeConfigValue) !== JSON.stringify(initialConfigValue)
}, { deep: true, immediate: true })
</script>

<template>
  <div class="d-lg-block d-none">
    <VBtn
      icon
      class="app-customizer-toggler rounded-s-pill rounded-0"
      style="z-index: 1001;"
      @click="isNavDrawerOpen = true"
    >
      <VIcon icon="ri-apps-2-line" />
    </VBtn>

    <VNavigationDrawer
      v-model="isNavDrawerOpen"
      temporary
      touchless
      border="none"
      location="end"
      width="200"
      class="app-customizer"
    >
      <!-- ðŸ‘‰ Header -->
      <div class="customizer-heading d-flex align-center justify-space-between">
        <div>
          <h6 class="text-h6">
            {{ $t("application_switcher") }}
          </h6>
          <p class="text-body-2 mb-0">
            {{ $t("application_switcher_description") }}
          </p>
        </div>

          <VBtn
            icon
            variant="text"
            color="medium-emphasis"
            @click="isNavDrawerOpen = false"
            absolute
          >
            <VIcon
              icon="ri-close-line"
              size="24"
            />
          </VBtn>
      </div>

      <VDivider />

      <PerfectScrollbar
        tag="ul"
        :options="{ wheelPropagation: false }"
      >
        <div class="d-flex flex-column gap-3 py-10 px-6">
          <NuxtLink :to="vircomPortal" class="app-card border border-primary rounded d-flex flex-column ga-2 py-4 align-center">
            <VIcon
              size="30"
              icon="ri-mail-line"
            />
            <span class="text-sm">Vircom Portal</span>
          </NuxtLink>

          <NuxtLink :to="ppManager" class="app-card border border-primary rounded d-flex flex-column ga-2 py-4 align-center">
            <VIcon
              size="30"
              icon="ri-product-hunt-line"
            />
            <span class="text-sm">Proofpoint Manager</span>
          </NuxtLink>

          <NuxtLink :to="psaSync" class="app-card border border-primary rounded d-flex flex-column ga-2 py-4 align-center">
            <VIcon
              size="30"
              icon="ri-links-line"
            />
            <span class="text-sm">PSA Sync</span>
          </NuxtLink>
        </div>
      </PerfectScrollbar>
    </VNavigationDrawer>
  </div>
</template>

<style lang="scss">
.app-customizer {
  .customizer-section {
    display: flex;
    flex-direction: column;
    padding: 1.25rem;
    gap: 1.5rem;
  }

  .customizer-heading {
    padding-block: 1rem;
    padding-inline: 1.5rem;

    .v-badge--dot {
      .v-badge__badge {
        block-size: 6px;
        inline-size: 6px;
      }
    }
  }

  .v-navigation-drawer__content {
    display: flex;
    flex-direction: column;
  }

  .customizer-skins {
    .custom-input.active {
      .customizer-skins-icon-wrapper {
        background-color: rgba(var(--v-global-theme-primary), var(--v-selected-opacity));
      }
    }
  }

  .app-customizer-primary-colors {
    .primary-color-wrapper:not(.active) {
      &:hover {
        outline-color: rgba(var(--v-border-color), 0.22) !important;
      }
    }
  }
}

.app-customizer-toggler {
  position: fixed !important;
  inset-block-start: 20%;
  inset-inline-end: 0;
  transform: translateY(-50%);
}

.app-card {
  &:hover{
    cursor: pointer;
    background: rgba(var(--v-theme-primary), 0.2);
    color: rgb(var(--v-theme-primary)) !important;
  }
}
</style>
