<script lang="ts" setup>
import { useCustomerStore } from '@/store/customerStore';
import { ref, watch } from 'vue';
import { useI18n } from 'vue-i18n';

const customerStore = useCustomerStore();
const { t, locale } = useI18n({ useScope: 'global' });
const { alertsState, getSelectedCustomer } = storeToRefs(customerStore)

const headers = computed(() => [
  { title: t('alertTableTitle_level'), key: 'severity' },
  { title: t("alertTableTitle_type"), key: 'alertType' },
  { title: t('alertTableTilte_title'), key: 'alertTitle' },
  { title: t('alertTableTitle_parent'), key: 'userThatGeneratedAlert' },
  { title: t('alertTableTitle_organization'), key: 'organization' },
  { title: t("alertTableTitle_dateAndTime"), key: 'timeGenerated' },
  { title: "", key: 'actions' },
]);

const currentPage = ref(1);
const itemsPerPage = ref(5);
const columnFilters = ref<Record<string, string[]>>({
  severity: ["hight", "level", "critical", "important"],
  alertType: ["SpfProblem", "DmarcProblem", "InactiveFeatures"]
});


const itemsPerPageOptions = ref([
  { title: "5", value: 5},
  { title: "10", value: 10 },
  { title: "20", value: 20 },
  { title: "50", value: 50 },
])


const fetchAlerts = () => {
  customerStore.fetchAlerts({ 
    pPageNumber: currentPage.value, 
    pPageSize: itemsPerPage.value,
    uniqueSourceId: getSelectedCustomer.value
  });
};

const fetchAlertsCount = () => {
  // We should be able to count the alerts of a specific user
  customerStore.fetchAlertsCount(getSelectedCustomer.value);
}

const  alertLoadedKey = "alertsLoaded"

window.addEventListener("beforeunload", () => {
  console.log("beforeunload fired")

  window.sessionStorage.removeItem(alertLoadedKey)
})

onBeforeMount(() => {
  const hasAlreadyLoaded = window.sessionStorage.getItem(alertLoadedKey)
  if (!hasAlreadyLoaded) {
    fetchAlertsCount()
    fetchAlerts()  
    window.sessionStorage.setItem(alertLoadedKey, "true")
  }
})


watch(getSelectedCustomer, () => {
  fetchAlertsCount()
  fetchAlerts()
})

</script>

<template>
  <VCard elevation="0">
    <VCardTitle>
      {{ t("alertPage_mailFlowAlert") }}
    </VCardTitle>

    <VCardText>
      {{ t("alertPage_description") }}
    </VCardText>

    <VCardText>
      <VRow justify="space-between">
        <VCol cols="4" md="2" class="d-flex justify-end align-center">
          <IconBtn size="small"><VIcon icon="ri-printer-line" /></IconBtn>
          <IconBtn size="small"><VIcon icon="ri-download-2-line" /></IconBtn>
        </VCol>
      </VRow>
    </VCardText>

    <VCardText>
      <VDataTableServer
        :items-length="alertsState.count"
        :items="alertsState.alerts"
        :headers="headers"
        :items-per-page="itemsPerPage"
        :loading="alertsState.loading"
        :items-per-page-options="itemsPerPageOptions"
        @update:page="currentPage = $event; fetchAlerts()"
        @update:items-per-page="itemsPerPage = $event; fetchAlerts()"
      >
        <template v-slot:loading>
          <span>{{ t("alertTable_alertsLoading") }}</span>
        </template>

        <template v-slot:headers="{ columns, isSorted, getSortIcon, toggleSort }">
          <tr>
            <template v-for="column in columns" :key="column.key">
              <th>
                <div class="d-flex align-center">
                  <template v-if="columnFilters[column.key]">
                    <VMenu>
                      <template #activator="{ props }">
                        <VIcon v-bind="props" icon="ri-filter-2-line" class="ml-2" />
                      </template>
                      <VList>
                        <VListItem v-for="(value, index) in columnFilters[column.key]" :key="index">
                          <VCheckbox
                            v-model="columnFilters[column.key]"
                            :label="value"
                            :value="value"
                          />
                        </VListItem>
                      </VList>
                    </VMenu>
                  </template>
                  <span class="ml-2 mr-2 cursor-pointer" @click="() => toggleSort(column)">{{ column.title }}</span>
                  <template v-if="isSorted(column)">
                    <v-icon :icon="getSortIcon(column)"/>
                  </template>
                </div>
              </th>
            </template>
          </tr>
        </template>

        <!-- <template v-slot:[]>

        </template> -->

        <template v-slot:no-data>
          <span>{{ t("alertTable_emptyTable") }}</span>
        </template>
        
        <template #item.severity="{ item }">
          <VChip v-if="item.severity" class="font-weight-medium" size="small">{{ item.severity }}</VChip>
        </template>

        <template #item.alertType="{ item }">
          {{ item.alertType }}
        </template>

        <template #item.userThatGeneratedAlert="{ item }">
          {{ item.userThatGeneratedAlert }}
        </template>

        <template #item.organization="{ item }">
          {{ item.triggerDomain }}
        </template>

        <template #item.timeGenerated="{ item }">
          <VChip class="font-weight-medium" size="small">
            {{ Intl.DateTimeFormat(locale, {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              }).format(new Date(item.timeGenerated)) }}
          </VChip>
        </template>

        <template #item.actions="{ item }">
          <div class="d-flex gap-1">
            <IconBtn size="small"><VIcon icon="ri-more-line" /></IconBtn>
          </div>
        </template>
      </VDataTableServer>
    </VCardText>
  </VCard>
</template>
