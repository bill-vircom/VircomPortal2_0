<script lang="ts" setup>
import { ref, onBeforeMount, watch, computed } from 'vue';
import { useConfigStore } from '@core/stores/config';
import { themeConfig } from '@themeConfig';

// Components
import Footer from '@/layouts/components/Footer.vue';
import UserProfile from '@/layouts/components/UserProfile.vue';
import NavBarI18n from '@core/components/I18n.vue';

// @layouts plugin
import { VerticalNavLayout } from '@layouts';
import { useContentStore } from '@/store/contentStore';
import { useCustomerStore } from '@/store/customerStore';
import { useAuthStore } from '@/store/authStore';

const configStore = useConfigStore();
const { navItems } = useContentStore();
const customerStore = useCustomerStore();
const authData = useAuthStore();
const { t } = useI18n({ useScope: "global" })

const localisedNavItem = computed(() => navItems.map((item) => {
  if (item.to.name === "index") {
    item.title = t("index")
  }
  if (item.to.name === "alerts") {
    item.title = t("alerts")
  }
  return item
}))


// ‚ÑπÔ∏è Provide animation name for vertical nav collapse icon.
const verticalNavHeaderActionAnimationName = ref<null | 'rotate-back-180' | 'rotate-180'>(null);

onBeforeMount(() => {
  customerStore.fetchProofpointCustomers()
})

const { getAuthUser } = storeToRefs(authData)
const shoudlDisplaySelector = computed(() => [
  ADMIN_TYPE.CHANNEL_ADMIN,
  ADMIN_TYPE.STRATEGIC_PARTNER_ADMIN
].includes(getAuthUser.value.adminType as any))

const {
  selectProofPointCustomer,
  clearSelectedProofPointCustomer,
} = customerStore
const { proofPointCustomer } = storeToRefs(customerStore)

const autocompleteValue= ref('')
const clearAutocomplete = () => {
  autocompleteValue.value = ""
  clearSelectedProofPointCustomer()
}

const customers = ref<CustomerSelectorAsset[]>([])
const loading = ref(false)

watch(proofPointCustomer, (value) => {
  if (value.customers)
    customers.value = value.flatenCustomerList

  loading.value = value.loading
}, { deep: true })

// Watch for changes in navigation collapse and RTL settings
watch([() => configStore.isVerticalNavCollapsed, () => configStore.isAppRTL], ([isCollapsed, isRTL]) => {
  verticalNavHeaderActionAnimationName.value = isRTL 
    ? (isCollapsed ? 'rotate-back-180' : 'rotate-180') 
    : (isCollapsed ? 'rotate-180' : 'rotate-back-180');
}, { immediate: true });
</script>

<template>
  <VerticalNavLayout :nav-items="localisedNavItem">
    <!-- üëâ navbar -->
    <template #navbar="{ toggleVerticalOverlayNavActive }">
      <div class="d-flex h-100 align-center">
        <IconBtn
          id="vertical-nav-toggle-btn"
          class="ms-n2 d-lg-none"
          @click="toggleVerticalOverlayNavActive(true)"
        >
          <VIcon icon="ri-menu-line" />
        </IconBtn>

        <div class="d-none d-sm-flex w-50 ">
          <VBtn color="primary" class="mr-8" @click="clearAutocomplete" v-if="shoudlDisplaySelector">
            {{ $t("button_all_customers") }}
          </VBtn>

          <VAutocomplete
            prepend-inner-icon="ri-search-line"
            :items="customers"
            :placeholder="$t('placeholder_search')"
            :loading="loading"
            item-value="value"
            item-title="customer"
            v-model="autocompleteValue"
            @update:model-value="selectProofPointCustomer"
            density="compact"
            clearable
            class="mr-2"
            v-if="shoudlDisplaySelector"
          />

          <VBtn
            v-if="false"
            icon="ri-user-add-line"
            color="secondary"
            rounded="sm"
            :disabled="true"
          />

          <VChip color="primary" v-if="!shoudlDisplaySelector">
            {{ getAuthUser.displayname }}
          </VChip>
        </div>

        <VSpacer />

        <div class="d-flex gap-2">
          <NavBarI18n
            v-if="themeConfig.app.i18n.enable && themeConfig.app.i18n.langConfig?.length"
            :languages="themeConfig.app.i18n.langConfig"
          />
          <UserProfile />
        </div>
      </div>
    </template>

    <!-- üëâ Pages -->
    <slot />

    <!-- üëâ Footer -->
    <template #footer>
      <Footer />
    </template>

    <!-- üëâ Customizer -->
    <AppSwitcher />
  </VerticalNavLayout>
</template>

<style lang="scss">
@keyframes rotate-180 {
  from { transform: rotate(0deg); }
  to { transform: rotate(180deg); }
}

@keyframes rotate-back-180 {
  from { transform: rotate(180deg); }
  to { transform: rotate(0deg); }
}

.layout-vertical-nav {
  .nav-header {
    .header-action {
      animation-duration: 0.35s;
      animation-fill-mode: forwards;
      animation-name: v-bind(verticalNavHeaderActionAnimationName);
      transform: rotate(0deg);
    }
  }
}
</style>
