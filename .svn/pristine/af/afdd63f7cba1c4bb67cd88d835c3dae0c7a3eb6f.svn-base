<script lang="ts" setup>
import { useCustomerStore } from '@/store/customerStore';
import { ref, watch } from 'vue';
import { useI18n } from 'vue-i18n';

const search = ref("");
const customerStore = useCustomerStore();
const { t, locale } = useI18n({ useScope: 'global' });

const currentPage = ref(1);
const itemsPerPage = ref(10);


const headers = computed(() => [
  { title: t('alertTableTitle_level'), key: 'severity' },
  { title: t("alertTableTitle_type"), key: 'alertType' },
  { title: t('alertTableTilte_title'), key: 'alertTitle' },
  { title: t('alertTableTitle_site'), key: 'customer' },
  { title: t('alertTableTitle_parent'), key: 'userThatGeneratedAlert' },
  { title: t('alertTableTitle_organization'), key: 'organization' },
  { title: t("alertTableTitle_details"), key: 'alertDetail' },
  { title: t("alertTableTitle_status"), key: 'status' },
  { title: t("alertTableTitle_dateAndTime"), key: 'timeGenerated' },
  { title: "", key: 'actions' },
]);


const fetchAlerts = (uniqueSourceId?: string) => {
  customerStore.fetchAlerts({ 
    pPageNumber: currentPage.value, 
    pPageSize: itemsPerPage.value,
    uniqueSourceId
  });
};

onBeforeMount(() => {
  fetchAlerts()
})

const { alertsState, getSelectedCustomer } = storeToRefs(customerStore)

const alerts = ref([] as Alert[])
const loading = ref(false)

watch(alertsState, (value) => {
  if (value.alerts)
    alerts.value = value.alerts
  
  loading.value = value.loading
}, { deep: true })

watch(getSelectedCustomer, (value) => {
  fetchAlerts(value)
})

const totalItems = computed(() => alertsState.value.alerts.length || 0);
</script>

<template>
  <VCard elevation="0">
    <VCardTitle>
      {{ t("alertPage_mailFlowAlert") }}
    </VCardTitle>

    <VCardText>
      {{ t("alertPage_description") }}
    </VCardText>

    <VCardText>
      <VRow justify="space-between">
        <VCol cols="8" md="4">
          <VTextField
            v-model="search"
            :label="t('search')"
            :placeholder="t('placeholder_search')"
            append-inner-icon="ri-search-line"
            single-line
            hide-details
            dense
            outlined
          />
        </VCol>
        <VCol cols="4" md="2" class="d-flex justify-end align-center">
          <IconBtn size="small"><VIcon icon="ri-filter-2-line" /></IconBtn>
          <IconBtn size="small"><VIcon icon="ri-printer-line" /></IconBtn>
          <IconBtn size="small"><VIcon icon="ri-download-2-line" /></IconBtn>
        </VCol>
      </VRow>
    </VCardText>

    <VCardText>
      <VDataTableServer
        :items-length="totalItems"
        :items="alerts"
        :headers="headers"
        :items-per-page="itemsPerPage"
        :loading="loading"
        :search="search"
        @update:page="currentPage = $event; fetchAlerts()"
        @update:items-per-page="itemsPerPage = $event; fetchAlerts()"
      >
        <template v-slot:loading>
          <span>{{ t("alertTable_alertsLoading") }}</span>
        </template>

        <template v-slot:no-data>
          <span>{{ t("alertTable_emptyTable") }}</span>
        </template>
        
        <template #item.severity="{ item }">
          <VChip v-if="item.severity" class="font-weight-medium" size="small">{{ item.severity }}</VChip>
        </template>

        <template #item.alertType="{ item }">
          {{ item.alertType }}
        </template>

        <template #item.customer="{ item }">
          {{ item.admin }}
        </template>

        <template #item.userThatGeneratedAlert="{ item }">
          {{ item.userThatGeneratedAlert }}
        </template>

        <template #item.organization="{ item }">
          {{ item.triggerDomain }}
        </template>

        <template #item.alertDetail="{ item }">
          {{ item.alertDetail }}
        </template>

        <template #item.status="{ item }">
          <VChip
            class="font-weight-medium"
            size="small"
          >
            {{ item.reported }}
          </VChip>
        </template>

        <template #item.timeGenerated="{ item }">
          <VChip class="font-weight-medium" size="small">
            {{ Intl.DateTimeFormat(locale, {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              }).format(new Date(item.timeGenerated)) }}
          </VChip>
        </template>

        <template #item.actions="{ item }">
          <div class="d-flex gap-1">
            <IconBtn size="small"><VIcon icon="ri-more-line" /></IconBtn>
          </div>
        </template>
      </VDataTableServer>
    </VCardText>
  </VCard>
</template>
